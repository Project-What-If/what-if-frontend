{"version":3,"sources":["components/views/RoomsPage/RoomsList/RoomsList.js","slice/roomSlice.js","components/views/RoomPage/RoomRegister/Sections/RoomRegisterOrEdit.js","components/views/RoomPage/RoomRegister/RoomRegister.js","slice/roomsSlice.js","components/views/RoomsPage/RoomsPage.js","components/views/RoomPage/Sections/RoomDetail.js","components/views/RoomPage/RoomPage.js","components/App.js","reportWebVitals.js","slice/rootSlice.js","utils/history.js","sagas/roomSaga.js","sagas/roomsSaga.js","sagas/rootSaga.js","store.js","index.js"],"names":["RoomsList","rooms","console","log","width","map","room","id","to","title","views","roomSlice","createSlice","name","initialState","tag","content","image","imageURL","date","Date","now","editDate","reducers","registerRoom","state","payload","getRoom","getRoomAsync","putRoom","putRoomAsync","fetchRoom","deleteRoom","roomReducers","reducer","roomActions","actions","TextArea","Input","RoomRegisterOrEdit","updateRequest","handleSubmit","handleTitleChange","handleTagChange","handleContentChange","handleImageChange","titleValue","tagValue","contentValue","imagePreview","imageValue","style","maxWidth","margin","onSubmit","onChange","value","type","placeholder","accept","display","for","onClick","RoomRegister","IsForUpdate","idParam","dispatch","useDispatch","useSelector","initialImage","useState","TitleValue","setTitleValue","TagValue","setTagValue","ContentValue","setContentValue","ImageValue","setImageValue","ImageURLValue","setImageURLValue","useEffect","className","src","height","roomHandler","queries","checks","imageURLValue","event","currentTarget","preventDefault","reader","FileReader","file","target","files","readAsDataURL","onloadend","newFile","key","result","i","length","alert","roomsSlice","isLoading","isSuccess","error","getRooms","getRoomsAsync","data","getRoomsFailedAsync","roomsReducers","roomsActions","Title","Typography","RoomsPage","check","onCheck","undefined","RoomDetail","handleDeleteClick","textAlign","colSpan","toLocaleString","pathname","search","RoomPage","match","isEdit","url","startsWith","params","roomId","window","confirm","App","exact","path","process","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","createBrowserHistory","registerRoomAsync","fetchRoomAsync","deleteRoomAsync","action","Axios","post","response","history","push","get","put","parseInt","request","delete","message","rootWatcher","takeLatest","takeEvery","sagaMiddleware","createSagaMiddleware","context","store","configureStore","middleware","logger","devTools","preloadedState","run","rootSaga","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfaaeeff.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction RoomsList({ rooms }) {\n    console.log(rooms);\n    return (\n        <div>\n            <table>\n                <colgroup>\n                    <col width=\"10%\" /> <col width=\"10%\" /> <col width=\"40%\" /> <col width=\"40%\" />\n                </colgroup>\n                <tr>\n                    <th>번호</th> <th>제목</th> <th>조회수</th>\n                </tr>\n                {rooms.map(room => (\n                    <tr>\n                        <td>{room.id}</td>\n                        <Link to={`/room/${room.id}`}>\n                            <td>{room.title}</td>\n                        </Link>\n                        <td>{room.views}</td>\n                    </tr>\n                ))}\n            </table>\n        </div>\n    );\n}\n\nexport default RoomsList;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const roomSlice = createSlice({\n    name: 'room',\n    initialState: {\n        id: 0,\n        title: '',\n        tag: '',\n        content: '',\n        image: null,\n        imageURL: '',\n        views: 0,\n        date: new Date(Date.now()),\n        editDate: '',\n    },\n    reducers: {\n        registerRoom: (state, { payload: room }) => {\n            console.log(room); // saga 감시용\n        },\n        // registerRoomAsync: (state, { payload }) => {\n        //     console.log(payload);\n        //     debugger;\n        //     return { ...state, id: payload.id };\n        // },\n        getRoom: (state, { payload: id }) => {\n            console.log(id); // saga 감시용\n        },\n        getRoomAsync: (state, { payload: room }) => {\n            console.log('saga에서 put 액션 호출 -- getRoomAsync');\n            return {\n                ...state,\n                id: room.id,\n                title: room.title,\n                tag: room.tag,\n                content: room.content,\n                image: room.image,\n                imageURL: room.imageURL,\n                views: room.views,\n                date: room.date,\n                editDate: room.editDate,\n            }; // 실질적으로 내용을 뿌려주는 부분\n        },\n        putRoom: (state, { payload: room }) => {\n            console.log('방 수정 액션 호출 -- putRoom'); // saga에서 감시용\n        },\n        putRoomAsync: (state, { payload: room }) => {\n            console.log(room);\n            return {\n                ...state,\n                id: room.id,\n                title: room.title,\n                tag: room.tag,\n                content: room.content,\n                image: room.image,\n                imageURL: room.imageURL,\n                views: room.views,\n                date: room.date,\n                editDate: room.editDate,\n            }; // 실질적으로 내용을 뿌려주는 부분\n        },\n        fetchRoom: (state, { payload: id }) => {\n            console.log('방 조회 액션 호출 -- fetchRoom'); // saga에서 감시용\n        },\n        deleteRoom: (state, { payload: id }) => {\n            console.log('방 삭제 액션 호출 -- deleteRoom'); // saga에서 감시용\n        },\n    },\n});\n\nexport const roomReducers = roomSlice.reducer;\nexport const roomActions = roomSlice.actions;\n","import React from 'react';\nimport { Button, Input } from 'antd';\n\nconst { TextArea } = Input;\n\nfunction RoomRegisterOrEdit({ updateRequest, handleSubmit, handleTitleChange, handleTagChange, handleContentChange, handleImageChange, titleValue, tagValue, contentValue, imagePreview, imageValue }) {\n    return (\n        <div style={{ maxWidth: '700px', margin: '2rem auto' }}>\n            <form onSubmit={handleSubmit}>\n                <br />\n                <div style={{ maxWidth: '700px', margin: '2rem' }}>\n                    <Input onChange={handleTitleChange} value={titleValue} type=\"text\" name=\"title\" placeholder=\":제목을 입력하세요\" />\n                    <hr></hr>\n                    <Input onChange={handleTagChange} value={tagValue} type=\"text\" name=\"tag\" placeholder=\"#태그를 입력해주세요(최대 3개)\" />\n                    <hr></hr>\n                    <div>\n                        <TextArea onChange={handleContentChange} value={contentValue} name=\"content\" />\n                    </div>\n                    <Input onChange={handleImageChange} accept=\"image/jpg,image/png,image/jpeg,image/gif\" type=\"file\" name=\"image\" id=\"image\" style={{ display: 'none' }} />\n                    <Button>\n                        <label for=\"image\">{imageValue?.name}</label>\n                    </Button>\n                    {imagePreview}\n                </div>\n                <Button type=\"danger\" onClick={handleSubmit}>\n                    {updateRequest ? '수정' : '등록'}\n                </Button>\n            </form>\n        </div>\n    );\n}\n\nexport default RoomRegisterOrEdit;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { roomActions } from '../../../../slice/roomSlice';\nimport RoomRegisterOrEdit from './Sections/RoomRegisterOrEdit';\n\nfunction RoomRegister({ IsForUpdate, idParam }) {\n    const dispatch = useDispatch();\n\n    const { id, title, tag, content, image, imageURL, views, date, editDate } = useSelector(state => ({\n        id: state.roomReducers.id,\n        title: state.roomReducers.title,\n        tag: state.roomReducers.tag,\n        content: state.roomReducers.content,\n        image: state.roomReducers.image,\n        imageURL: state.roomReducers.imageURL,\n        views: state.roomReducers.views,\n        date: state.roomReducers.date,\n        editDate: state.roomReducers.editDate,\n    }));\n\n    const initialImage = { name: 'Select Image' };\n    const [TitleValue, setTitleValue] = useState('');\n    const [TagValue, setTagValue] = useState('');\n    const [ContentValue, setContentValue] = useState('');\n    const [ImageValue, setImageValue] = useState(initialImage);\n    const [ImageURLValue, setImageURLValue] = useState('');\n\n    useEffect(() => {\n        if (!IsForUpdate) {\n            setTitleValue('');\n            setTagValue('');\n            setContentValue('');\n            setImageValue(initialImage);\n            setImageURLValue('');\n            return;\n        }\n        dispatch(roomActions.fetchRoom(idParam));\n        console.log(idParam);\n    }, [IsForUpdate]);\n\n    const onTitleChange = event => {\n        setTitleValue(event.currentTarget.value);\n    };\n\n    const onTagChange = event => {\n        setTagValue(event.currentTarget.value);\n    };\n\n    useEffect(() => {\n        if (!IsForUpdate) {\n            return;\n        }\n        setTitleValue(title);\n        setTagValue(tag);\n        setContentValue(content);\n        setImageValue(image);\n        setImageURLValue(imageURL);\n    }, [title, tag, content, image, imageURL]);\n\n    const onContentChange = event => {\n        setContentValue(event.currentTarget.value);\n    };\n\n    const onImageChange = event => {\n        event.preventDefault();\n        const reader = new FileReader();\n        const file = event.target.files[0];\n        if (file) {\n            reader.readAsDataURL(file);\n        }\n        reader.onloadend = () => {\n            const newFile = {};\n            for (const key in file) {\n                newFile[key] = file[key];\n            }\n            console.log(newFile);\n            setImageValue(newFile);\n            setImageURLValue(reader.result);\n        };\n    };\n\n    const imagePreview = ImageURLValue ? (\n        <div>\n            <img className=\"image_preview\" src={ImageURLValue} height=\"100%\" width=\"250px\"></img>\n        </div>\n    ) : null;\n\n    const roomHandler = IsForUpdate ? roomActions.putRoom : roomActions.registerRoom;\n\n    const queries = ['제목', '태그', '내용', '이미지'];\n    const checks = [TitleValue, TagValue, ContentValue, ImageValue];\n    const onSubmitRoom = event => {\n        event.preventDefault();\n        for (let i = 0; i < queries.length; i++) {\n            const query = queries[i];\n            const check = checks[i];\n            if (!check) {\n                alert(`${query}를 입력하세요.`);\n                return false;\n            }\n        }\n\n        const room = {\n            title: TitleValue,\n            tag: TagValue,\n            content: ContentValue,\n            image: ImageValue,\n            imageURL: ImageURLValue,\n            views,\n            date,\n            editDate: new Date(Date.now()),\n        };\n        if (id) {\n            room.id = id;\n        }\n\n        setTitleValue('');\n        setTagValue('');\n        setContentValue('');\n        setImageValue(null);\n        setImageURLValue('');\n\n        dispatch(roomHandler(room));\n    };\n\n    return (\n        <>\n            <RoomRegisterOrEdit\n                titleValue={TitleValue}\n                tagValue={TagValue}\n                contentValue={ContentValue}\n                imageValue={ImageValue}\n                imageURLValue={ImageURLValue}\n                // imageRef={ImageRef}\n                imagePreview={imagePreview}\n                handleTitleChange={onTitleChange}\n                handleTagChange={onTagChange}\n                handleContentChange={onContentChange}\n                handleImageChange={onImageChange}\n                handleSubmit={onSubmitRoom}\n                updateRequest={IsForUpdate}\n            />\n        </>\n    );\n}\n\nexport default RoomRegister;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const roomsSlice = createSlice({\n    name: 'rooms',\n    initialState: {\n        rooms: [],\n        isLoading: true,\n        isSuccess: false,\n        error: null,\n    }, // room 배열 리스트를 가져오는 것이어서 state를 하나하나 지정할 필요 X\n\n    reducers: {\n        getRooms: (state, { payload }) => {\n            console.log('방 목록 조회 액션 호출 - getRooms');\n        },\n        getRoomsAsync: (state, { payload: data }) => {\n            console.log('saga에서 put 액션 호출 - getRoomsAsyncs');\n            return {\n                ...state,\n                rooms: data,\n                isSuccess: true,\n                isLoading: false,\n            };\n        },\n        getRoomsFailedAsync: (state, { payload: error }) => {\n            console.log('saga에서 put 액션 호출 - getRoomsFailedAsync');\n            return {\n                ...state,\n                isLoading: false,\n                error: error,\n            };\n        },\n    },\n});\n\nexport const roomsReducers = roomsSlice.reducer;\nexport const roomsActions = roomsSlice.actions;\n","import React, { useState, useEffect } from 'react';\nimport { Button, Typography } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport RoomsList from './RoomsList/RoomsList';\nimport RoomRegister from '../RoomPage/RoomRegister/RoomRegister';\nimport { roomsActions } from '../../../slice/roomsSlice';\n\nconst { Title } = Typography;\n\nfunction RoomsPage() {\n    const [check, onCheck] = useState(false);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(roomsActions.getRooms());\n    }, [dispatch]);\n\n    const { rooms, isLoading, isSuccess, error } = useSelector(state => ({\n        rooms: state.roomsReducers.rooms,\n        isLoading: state.roomsReducers.isLoading,\n        isSuccess: state.roomsReducers.isSuccess,\n        error: state.roomsReducers.error,\n    }));\n\n    const room = <RoomRegister IsForUpdate={false} idParam={undefined} />;\n\n    return (\n        <div style={{ maxWidth: '700px', margin: '2rem auto' }}>\n            <div>\n                <Title>Best</Title>\n            </div>\n            <div>\n                <Button type=\"primary\" onClick={() => onCheck(!check)}>\n                    +\n                </Button>\n                {check && room}\n            </div>\n            <div>\n                {error ? (\n                    <h2>에러 발생: {error}</h2>\n                ) : isSuccess && rooms.length > 0 ? (\n                    <RoomsList rooms={rooms} />\n                ) : isSuccess && rooms.length <= 0 ? (\n                    <p> 조회할 내용이 없습니다. </p>\n                ) : (\n                    <p> 목록을 불러오는 중입니다. </p>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default RoomsPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Typography } from 'antd';\n\nconst { Title } = Typography;\n\nfunction RoomDetail({ id, views, title, tag, imageURL, content, date, handleDeleteClick }) {\n    return (\n        <div>\n            <div style={{ margin: '2rem auto' }}>\n                {/* <a href=\"/\"> */}\n                <Link to=\"/\">\n                    <Button type=\"primary\">목록으로 가기</Button>\n                </Link>\n                {/* </a> */}\n            </div>\n\n            <div style={{ textAlign: 'center' }}>\n                <Title>{id}번째 방</Title>\n            </div>\n            <div>\n                <table>\n                    <colgroup>\n                        <col width=\"10%\" /> <col width=\"40%\" /> <col width=\"10%\" /> <col width=\"40%\" />\n                    </colgroup>\n                    <tr>\n                        <th>번호</th> <td>{id}</td> <th>조회수</th> <td>{views}</td>\n                    </tr>\n                    <tr>\n                        <th>제목</th> <td colSpan=\"3\">{title}</td>\n                    </tr>\n                    <tr>\n                        <th>태그</th> <td colSpan=\"3\">{tag}</td>\n                    </tr>\n                    <tr>\n                        <th>이미지URL</th>\n                        <td colSpan=\"3\">\n                            <div>\n                                <img className=\"image\" src={imageURL} height=\"100%\" width=\"250px\" />\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <th>내용</th> <td colSpan=\"3\">{content}</td>\n                    </tr>\n                    <tr>\n                        <th>날짜</th> <td colSpan=\"3\">{new Date(date).toLocaleString()}</td>\n                    </tr>\n                </table>\n            </div>\n            <div style={{ margin: '2rem auto' }}>\n                <Link\n                    to={{\n                        pathname: `/edit/${id}`,\n                        search: '',\n                        state: {\n                            id: id,\n                            title: title,\n                            tag: tag,\n                            content: content,\n                            imageURL: imageURL,\n                        },\n                    }}\n                >\n                    <Button type=\"primary\">수정</Button>\n                </Link>\n            </div>\n            <div style={{ margin: 'auto' }}>\n                <Button onClick={handleDeleteClick} type=\"danger\">\n                    삭제\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nexport default RoomDetail;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { roomActions } from '../../../slice/roomSlice';\nimport RoomDetail from './Sections/RoomDetail';\nimport RoomRegister from './RoomRegister/RoomRegister';\n\nfunction RoomPage({ match }) {\n    const dispatch = useDispatch();\n    const isEdit = match?.url?.startsWith('/edit') ?? false;\n\n    useEffect(() => {\n        dispatch(roomActions.getRoom(match.params.roomId));\n    }, [match.params.roomId]);\n\n    const { id, title, tag, content, image, imageURL } = useSelector(state => ({\n        id: state.roomReducers.id,\n        title: state.roomReducers.title,\n        tag: state.roomReducers.tag,\n        content: state.roomReducers.content,\n        image: state.roomReducers.image,\n        imageURL: state.roomReducers.imageURL,\n    }));\n    const date = useSelector(state => state.roomReducers.date);\n    const views = useSelector(state => state.roomReducers.views);\n\n    const onDeleteClick = () => {\n        if (!window.confirm('삭제하시겠습니까?')) return false;\n        dispatch(roomActions.deleteRoom(id));\n    };\n\n    const res = isEdit ? (\n        <RoomRegister IsForUpdate={true} idParam={match.params.roomId} />\n    ) : (\n        <div style={{ width: '80%', margin: '3rem auto' }}>\n            <RoomDetail id={id} title={title} tag={tag} content={content} imageURL={imageURL} views={views} date={date} handleDeleteClick={onDeleteClick} />\n        </div>\n    );\n\n    return res;\n}\n\nexport default RoomPage;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport RoomsPage from './views/RoomsPage/RoomsPage';\nimport RoomPage from './views/RoomPage/RoomPage';\nimport '../App.css';\n\nfunction App() {\n    return (\n        <div>\n            <Switch>\n                <Route exact path={process.env.PUBLIC_URL + '/'} component={RoomsPage} />\n                <Route exact path={process.env.PUBLIC_URL + '/room/:roomId'} component={RoomPage} />\n                <Route exact path={process.env.PUBLIC_URL + '/edit/:roomId'} component={RoomPage} />\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","// rootReducer\nimport { combineReducers } from 'redux';\nimport { roomReducers } from './roomSlice';\nimport { roomsReducers } from './roomsSlice';\n\nconst rootReducer = combineReducers({ roomReducers, roomsReducers });\n\nexport default rootReducer;\n","// 유지보수용으로 따로 뺌: 반복되는 것은 따로 빼자\nimport { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import { call, put, getContext } from 'redux-saga/effects';\nimport Axios from 'axios';\nimport { roomActions } from '../slice/roomSlice';\nimport history from '../utils/history';\n\nexport function* registerRoomAsync(action) {\n    const data = action.payload;\n\n    const response = yield Axios.post(`http://localhost:4000/room`, data);\n\n    yield alert('저장되었습니다.');\n\n    console.log(response.data.id);\n\n    history.push(`/room/${response.data.id}`, response.data.id);\n}\nexport function* getRoomAsync(action) {\n    const id = action.payload;\n\n    const response = yield Axios.get(`http://localhost:4000/room/${id}`);\n\n    const request = yield Axios.put(`http://localhost:4000/room/${id}`, {\n        ...response.data,\n        views: parseInt(response.data.views, 10) + 1,\n    });\n\n    yield put(roomActions.getRoomAsync(request.data));\n} // getArticle 액션을 가로채서 payload로 보낸 id로 게시글을 조회\n\nexport function* putRoomAsync(action) {\n    const room = action.payload;\n    console.log('putRoomAsync', action.payload);\n    const response = yield Axios.put(`http://localhost:4000/room/${room.id}`, room);\n    yield put(roomActions.putRoomAsync(response.data));\n\n    history.push(`/room/${response.data.id}`, response.data.id);\n} // 방(룸) 수정 saga\n\nexport function* fetchRoomAsync(action) {\n    console.log(action);\n\n    const id = action.payload;\n\n    const response = yield Axios.get(`http://localhost:4000/room/${id}`);\n\n    yield put(roomActions.getRoomAsync(response.data));\n}\n\nexport function* deleteRoomAsync(action) {\n    console.log(action);\n\n    const id = action.payload;\n\n    yield Axios.delete(`http://localhost:4000/room/${id}`);\n\n    console.log(`{id}번 삭제가 완료되었습니다.`);\n\n    history.push('/');\n} // 방(룸) 삭제 saga\n","import { call, put } from 'redux-saga/effects';\nimport Axios from 'axios';\nimport { roomsActions } from '../slice/roomsSlice';\n\nexport function* getRoomsAsync() {\n    try {\n        const response = yield Axios.get(`http://localhost:4000/room`);\n        yield put(roomsActions.getRoomsAsync(response.data));\n    } catch (e) {\n        yield put(roomsActions.getRoomsFailedAsync(e.message));\n    }\n    // 조회 실패 시 payload로 boardSaga에서 발생할 error 메시지\n}\n","// saga도 기능별로 만들 수 있으므로 rootSaga 하나 둠\nimport { takeEvery, takeLatest } from 'redux-saga/effects';\nimport { roomActions } from '../slice/roomSlice';\nimport { roomsActions } from '../slice/roomsSlice';\nimport { registerRoomAsync, getRoomAsync, putRoomAsync, fetchRoomAsync, deleteRoomAsync } from './roomSaga';\nimport { getRoomsAsync } from './roomsSaga';\n\nconst { registerRoom, getRoom, putRoom, fetchRoom, deleteRoom } = roomActions;\nconst { getRooms } = roomsActions;\n\nexport default function* rootWatcher() {\n    yield takeLatest(registerRoom.type, registerRoomAsync);\n    yield takeLatest(putRoom.type, putRoomAsync);\n    yield takeEvery(getRoom.type, getRoomAsync);\n    yield takeEvery(getRooms.type, getRoomsAsync);\n    yield takeEvery(fetchRoom.type, fetchRoomAsync);\n    yield takeLatest(deleteRoom.type, deleteRoomAsync);\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\nimport rootReducer from './slice/rootSlice';\nimport rootSaga from './sagas/rootSaga';\nimport history from './utils/history';\n\nconst sagaMiddleware = createSagaMiddleware({\n    context: { history: history },\n});\nconst initialState = {};\n\nconst store = configureStore({\n    reducer: rootReducer,\n    middleware: [sagaMiddleware, logger],\n    devTools: true,\n    preloadedState: initialState,\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\nimport history from './utils/history';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router history={history}>\n            <App />\n        </Router>\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}